{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","prototypes","PropTypes","func","isRequired","array","object","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPosts","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","App","es","className","style","textAlign","components_PostForm","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7269ad04.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { fetchPosts } from '../actions/postActions'\n\n class Posts extends Component {\n\n  componentWillMount () {\n    this.props.fetchPosts()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost)\n    }\n  }\n\n  render () {\n    const postItems = this.props.posts.map(post => {\n      return <div key={post.id}>\n              <h3>{post.title}</h3>\n              <p>{post.body}</p>\n            </div>\n    })\n    return (\n      <div>\n        <h1>Posts</h1>\n        {postItems}\n      </div>\n    )\n  }\n}\n\nPosts.prototypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  newPost: state.posts.item\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts)\n","import { FETCH_POSTS, NEW_POSTS } from './types'\n\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts => dispatch({\n      type: FETCH_POSTS,\n      payload: posts\n    }))\n}\n\nexport const createPosts = postData => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(postData)\n  })\n  .then(res => res.json())\n  .then(post => dispatch({\n    type: NEW_POSTS,\n    payload: post\n  }))}","export const FETCH_POSTS = 'FETCH_POSTS'\nexport const NEW_POSTS = 'NEW_POSTS'","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { createPosts } from '../actions/postActions'\n\nclass PostForm extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      title: '',\n      body: ''\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange (e) {\n    this.setState({ [e.target.name]:e.target.value })\n  }\n\n  onSubmit (e) {\n    e.preventDefault()\n\n    const post = {\n      title: this.state.title,\n      body: this.state.body\n    }\n\n    // Call Action\n    this.props.createPosts(post)\n    \n    // Clean fields\n    this.setState({title: '', body: ''})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Add Post</h1>\n        <form onSubmit={this.onSubmit}>\n          <div>\n            <label>Title: </label><br/>\n            <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title}/>\n          </div>\n          <br/>\n          <div>\n            <label>Body: </label><br/>\n            <textarea name=\"body\" onChange={this.onChange} value={this.state.body}></textarea>\n          </div>\n          <br/>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nPostForm.prototypes = {\n  createPosts: PropTypes.func.isRequired\n}\n\nexport default connect(null, { createPosts })(PostForm)\n","import { FETCH_POSTS, NEW_POSTS } from '../actions/types'\n\nconst initialState = {\n  items: [],\n  item: {}\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return {\n        ...state,\n        items: action.payload\n      }\n    case NEW_POSTS:\n      return {\n        ...state,\n        item: action.payload\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport postReducer from './postReducer'\n\nexport default combineReducers({\n  posts: postReducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  rootReducer, \n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n) \n\nexport default store","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\n\nimport Posts from './components/Posts'\nimport PostForm from './components/PostForm'\n\nimport store from './store'\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 style={{textAlign: 'center'}}>React/Redux App</h1>\n          </header>\n          <PostForm />\n          <hr/>\n          <Posts />\n        </div>\n\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}